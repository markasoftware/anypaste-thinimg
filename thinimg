#!/usr/bin/env bash

# This is anypaste-thinimg, released under the GPLv3
# Authored by markasoftware, see markasoftware.com

# Our plugin will be run with a different first argument depending on what Core
# wants us to do
case $1 in
	check_eligibility)
		# For check_eligibility, we check whether our plugin is compatible with the file.
		# The absolute file path is in environment variable $ap_path, and the mime type in $ap_mime
		# The exit code is used to determine compatibility: 0 = compatible, anything else = incompatible
		# Lets assume that thinimg can handle any MIME type starting with image/, although realistically it
		# probably only supports png, jpeg, tif, and other common stuff.
		# Realistically, we should probably be checking $ap_ffprobe as well, since it's more accurate. Check
		# out the builtin plugins if you care.
		# Copy-pasting stuff from Anypaste Core will really help you out here!
		[[ $ap_mime == image/* ]]
		;;
	upload)
		# For upload, we upload the file. Environment variables are the same as for check_eligibility
		# thinimg expects us to upload the file as a form-field, then 302 redirects us to the link.
		# Curl options: -# is progress bar, -f is fail on bad HTTP response codes,
		# and -D is dump response headers to specified file (stdout here)
		# We specify mime type explicitly because curl often doesn't detect it well
		# if stdout is a terminal
		thin_headers=$(curl -#fF "img[]=@$ap_path;type=$ap_mime" -D - 'http://thinimg.com/') ||
			{ echo 'ERROR: Upload request did not return HTTP 200!' >&2 && exit 1; }
		# Now, lets parse out the response URL. It's the only url in the response headers that starts
		# with http://i.thinimg.com/img/, so we just grep for a string starting with that
		thin_link=$(echo "$thin_headers" | grep -o 'http://i\.thinimg\.com/img/[a-zA-Z0-9.]*')
		# Most sites have the links in the normal request body, and as json. There is a crappy json parser function
		# in Anypaste core you might want to copy-paste into your plugin sometimes.
		echo ''
		echo "Direct: $thin_link"
		echo ''
		;;
	get_info)
		# here, we output an ini-like format which describes the plugin's metadata.
		# This is where the data in `anypaste -l` comes from, and is also used for -t (tags).
		# If you are making an "authenticated" plugin that takes config options, see streamable and docdroid
		echo '[name]'
		echo 'ThinImg'
		echo '[description]'
		echo 'Very simple, direct-links-only image hosting site. This is an example plugin.'
		echo '[tags]'
		echo 'private'
		echo 'permanent'
esac
